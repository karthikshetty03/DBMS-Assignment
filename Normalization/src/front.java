import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import normalization.Algos;
import normalization.Attribute;
import normalization.FuncDep;
import normalization.Relation;


public class front extends javax.swing.JFrame {

    private static final String ERR = "Error!";
    /**
     * Creates new form front
     */
    public front() {
        
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("Database Management System :- MODULE 1");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonCheck3NF = new javax.swing.JButton();
        buttonCheckBCNF = new javax.swing.JButton();
        buttonSuperkey = new javax.swing.JButton();
        fieldFD = new javax.swing.JTextField();
        fieldAttribute = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        buttonKey = new javax.swing.JButton();
        buttonDecompBCNF = new javax.swing.JButton();
        buttonDecomp3NF = new javax.swing.JButton();
        buttonTestInput = new javax.swing.JButton();
        buttonLossyCheck = new javax.swing.JButton();
        buttonCheckEquiv = new javax.swing.JButton();
        buttonMinimalBasis = new javax.swing.JButton();
        buttonProjection = new javax.swing.JButton();
        buttonClosure = new javax.swing.JButton();
        help = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        buttonCheck2NF = new javax.swing.JButton();
        buttonDecomp2NF = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));

        buttonCheck3NF.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonCheck3NF.setText("Check 3NF");
        buttonCheck3NF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheck3NFActionPerformed(evt);
            }
        });

        buttonCheckBCNF.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonCheckBCNF.setText("Check BCNF");
        buttonCheckBCNF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheckBCNFActionPerformed(evt);
            }
        });

        buttonSuperkey.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonSuperkey.setText("SuperKeys");
        buttonSuperkey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSuperkeyActionPerformed(evt);
            }
        });

        fieldFD.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        fieldFD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFDFocusGained(evt);
            }
        });

        fieldAttribute.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        fieldAttribute.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldAttributeFocusGained(evt);
            }
        });

        area.setColumns(20);
        area.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        buttonKey.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonKey.setText("Keys");
        buttonKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKeyActionPerformed(evt);
            }
        });

        buttonDecompBCNF.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonDecompBCNF.setText("BCNF Decomp.");
        buttonDecompBCNF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecompBCNFActionPerformed(evt);
            }
        });

        buttonDecomp3NF.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonDecomp3NF.setText("3NF Decomp.");
        buttonDecomp3NF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecomp3NFActionPerformed(evt);
            }
        });

        buttonTestInput.setFont(new java.awt.Font("Calibri", 2, 20)); // NOI18N
        buttonTestInput.setForeground(new java.awt.Color(255, 0, 0));
        buttonTestInput.setText("Test Inputs");
        buttonTestInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTestInputActionPerformed(evt);
            }
        });

        buttonLossyCheck.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonLossyCheck.setText("Detect FD Loss");
        buttonLossyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLossyCheckActionPerformed(evt);
            }
        });

        buttonCheckEquiv.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonCheckEquiv.setText("Check Equiv.");
        buttonCheckEquiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheckEquivActionPerformed(evt);
            }
        });

        buttonMinimalBasis.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonMinimalBasis.setText("Minimal Basis");
        buttonMinimalBasis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMinimalBasisActionPerformed(evt);
            }
        });

        buttonProjection.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonProjection.setText("Projection");
        buttonProjection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonProjectionActionPerformed(evt);
            }
        });

        buttonClosure.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonClosure.setText("Closure");
        buttonClosure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClosureActionPerformed(evt);
            }
        });

        help.setFont(new java.awt.Font("Calibri", 1, 20)); // NOI18N
        help.setText("HELP");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        jLabel1.setText("Attributes:");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        jLabel2.setText("FD's:");

        buttonCheck2NF.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonCheck2NF.setText("Check 2NF");
        buttonCheck2NF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheck2NFActionPerformed(evt);
            }
        });

        buttonDecomp2NF.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        buttonDecomp2NF.setText("2NF Decomp.");
        buttonDecomp2NF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecomp2NFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonLossyCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonCheckEquiv, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buttonTestInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonProjection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonSuperkey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonCheckBCNF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonDecompBCNF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonClosure, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonDecomp3NF, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonMinimalBasis, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonKey, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonCheck3NF, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonCheck2NF, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonDecomp2NF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldFD, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldAttribute, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldAttribute, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldFD, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonTestInput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonClosure, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonProjection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonMinimalBasis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonSuperkey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonCheckBCNF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonCheck3NF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonDecomp3NF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonDecompBCNF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonCheckEquiv, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonLossyCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonCheck2NF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonDecomp2NF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(77, 77, 77))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCheck3NFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheck3NFActionPerformed
         try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Check 3NF>>>\n\n");
      Relation r = new Relation(attrs, fds);
      if (r.is3NF()) {
        sb.append("This relation is already in 3NF.\n\n");
      } else {
        Set<FuncDep> violating = r.getFdsViolating3NF();
        sb.append("FD's violating 3NF:\n");
        for (FuncDep fd : violating) {
          sb.append(fd);
          sb.append('\n');
        } 
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonCheck3NFActionPerformed

    private void buttonCheckBCNFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheckBCNFActionPerformed
       try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Check BCNF>>>\n\n");
      Relation r = new Relation(attrs, fds);
      if (r.isBCNF()) {
        sb.append("This relation is already in BCNF.\n\n");
      } else {
        Set<FuncDep> violating = r.getFdsViolatingBCNF();
        sb.append("FD's violating BCNF:\n");
        for (FuncDep fd : violating) {
          sb.append(fd);
          sb.append('\n');
        } 
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonCheckBCNFActionPerformed

    private void buttonSuperkeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSuperkeyActionPerformed
       try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<All Superkeys>>>\n\n");
      Set<Set<Attribute>> keys = Algos.superKeys(Attribute.getSet(attrs), FuncDep.getSet(fds));
      for (Set<Attribute> sa : keys) {
        sb.append(sa);
        sb.append('\n');
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonSuperkeyActionPerformed

    private void fieldFDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldFDFocusGained
       this.fieldFD.selectAll();
    }//GEN-LAST:event_fieldFDFocusGained

    private void fieldAttributeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldAttributeFocusGained
       this.fieldAttribute.selectAll();
    }//GEN-LAST:event_fieldAttributeFocusGained

    private void buttonKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKeyActionPerformed
       try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<All Candidate Keys>>>\n\n");
      Set<Set<Attribute>> keys = Algos.keys(Attribute.getSet(attrs), FuncDep.getSet(fds));
      for (Set<Attribute> sa : keys) {
        sb.append(sa);
        sb.append('\n');
      } 
      sb.deleteCharAt(sb.length() - 1);
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    }
    }//GEN-LAST:event_buttonKeyActionPerformed

    private void buttonDecompBCNFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecompBCNFActionPerformed
        try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      Relation r = new Relation(attrs, fds);
      Set<Relation> rs = r.decomposeToBCNF();
      Set<Set<Attribute>> subattrs = new HashSet<>();
      for (Relation rl : rs)
        subattrs.add(rl.getAttributes()); 
      Set<FuncDep> lost = Algos.checkLossyDecomposition(r.getAttributes(), r.getFuncDeps(), subattrs);
      if (lost.isEmpty()) {
        sb.append("<<<Decomposed to BCNF with Preserved FD's>>>\n\n");
        for (Relation rl : rs) {
          sb.append(rl);
          sb.append("\n\n");
        } 
        sb.delete(sb.length() - 2, sb.length() - 1);
      } else {
        int select = JOptionPane.showConfirmDialog(this.rootPane, "Some FD's will be lost. Still continue?");
        if (select == 0) {
          sb.append("<<<Forced Decomposed to BCNF with FD Loss>>>\n\n");
          for (Relation rl : rs) {
            sb.append(rl);
            sb.append("\n\n");
          } 
          sb.append("Lost FD's:\n");
          for (FuncDep fd : lost) {
            sb.append(fd);
            sb.append('\n');
          } 
        } else {
          sb.append("Operation cancelled due to potential FD loss.\n\n");
        } 
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonDecompBCNFActionPerformed

    private void buttonDecomp3NFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecomp3NFActionPerformed
        try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Forced Decomposition Regardless of Necessity>>>\n\n");
      Relation r = new Relation(attrs, fds);
      Set<Relation> rs = r.decomposeTo3NF();
      for (Relation rl : rs) {
        sb.append(rl);
        sb.append("\n\n");
      } 
      sb.delete(sb.length() - 2, sb.length() - 1);
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonDecomp3NFActionPerformed

    private void buttonTestInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTestInputActionPerformed
       try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") && fds.equals("")) {
        this.area.setText("You didn't enter anything yet.");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Testing Inputs>>>\n\n");
      Set<Attribute> names = Attribute.getSet(attrs);
      if (!names.isEmpty()) {
        sb.append("Attributes:\n");
        for (Attribute a : names) {
          sb.append(a);
          sb.append(", ");
        } 
        sb.append("\n\n");
      } 
      sb.delete(sb.length() - 4, sb.length() - 2);
      Set<FuncDep> fs = FuncDep.getSet(fds);
      if (!fs.isEmpty()) {
        sb.append("Functional Dependencies: \n");
        for (FuncDep f : fs) {
          sb.append(f);
          sb.append('\n');
        } 
        sb.deleteCharAt(sb.length() - 1);
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonTestInputActionPerformed

    private void buttonLossyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLossyCheckActionPerformed
        try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Detect FD Loss During Decomposition>>>\n\n");
      String input = JOptionPane.showInputDialog("Please enter sub-relations.\nFormat: Attributes are seperated by comma, and relations by semicolon.\nExample: A,B,C; C,D,E; A,D");
      String[] inputs = input.split(";");
      Set<Set<Attribute>> subattrs = new HashSet<>();
      byte b;
      int i;
      String[] arrayOfString1;
      for (i = (arrayOfString1 = inputs).length, b = 0; b < i; ) {
        String s = arrayOfString1[b];
        subattrs.add(Attribute.getSet(s));
        b++;
      } 
      Set<FuncDep> lost = Algos.checkLossyDecomposition(Attribute.getSet(attrs), FuncDep.getSet(fds), subattrs);
      if (lost.size() == 0) {
        sb.append("No FD is lost.");
      } else {
        sb.append("If decomposed into the following sub-relations\n");
        String[] arrayOfString;
        for (int j = (arrayOfString = inputs).length; i < j; ) {
          String s = arrayOfString[i];
          sb.append('(');
          sb.append(s.trim());
          sb.append(')');
          sb.append('\n');
          i++;
        } 
        sb.deleteCharAt(sb.length() - 1);
        sb.append("\n\nthe following FD's will be lost:\n");
        for (FuncDep fd : lost) {
          sb.append(fd);
          sb.append('\n');
        } 
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    }
    }//GEN-LAST:event_buttonLossyCheckActionPerformed

    private void buttonCheckEquivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheckEquivActionPerformed
       try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Check Equivalent Sets of FD's>>>\n\n");
      String input = JOptionPane.showInputDialog("Please enter another set of FD's.\n");
      boolean equiv = Algos.equivalent(FuncDep.getSet(fds), FuncDep.getSet(input));
      if (equiv) {
        sb.append("Yes, these two sets of FD's are equivalent.");
      } else {
        sb.append("No, these two sets of FD's are NOT equivalent.");
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonCheckEquivActionPerformed

    private void buttonMinimalBasisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMinimalBasisActionPerformed
        try {
      String fds = this.fieldFD.getText();
      if (fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Minimal Basis>>>\n\n");
      Set<FuncDep> mb = Algos.minimalBasis(FuncDep.getSet(fds));
      for (FuncDep fd : mb) {
        sb.append(fd);
        sb.append('\n');
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    }
    }//GEN-LAST:event_buttonMinimalBasisActionPerformed

    private void buttonProjectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonProjectionActionPerformed
       try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Projection>>>\n\n");
      Set<FuncDep> mb = Algos.projection(Attribute.getSet(attrs), FuncDep.getSet(fds));
      for (FuncDep fd : mb) {
        sb.append(fd);
        sb.append('\n');
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    }
    }//GEN-LAST:event_buttonProjectionActionPerformed

    private void buttonClosureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClosureActionPerformed
        try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      Set<Attribute> closure = Algos.closure(Attribute.getSet(attrs), FuncDep.getSet(fds));
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Closure>>>\n\n");
      for (Attribute a : closure) {
        sb.append(a);
        sb.append(", ");
      } 
      sb.delete(sb.length() - 2, sb.length() - 1);
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    }
    }//GEN-LAST:event_buttonClosureActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
     JOptionPane.showMessageDialog(null ,"                      *****Attributes*****\n    Format: Attribute names separated by comma.\n    Examples:\n    name, location, favAppl, appl, provider\n    A,B,C,D,E\n\n                      *****FD's*****\n    Format: Attribute names separated by comma.\n    FD's separated by semicolon.\n    Examples:\n    name-->location,favAppl; appl-->provider \n    A-->B,C; C,D-->E; E-->A; B-->D\n\n    *White spaces are auto-ignored.\n    *Everything is case-sensitive.");
    }//GEN-LAST:event_helpActionPerformed

    private void buttonCheck2NFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheck2NFActionPerformed
          try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Check 2NF>>>\n\n");
      Relation r = new Relation(attrs, fds);
      if (r.is2NF()) {
        sb.append("This relation is already in 2NF.\n\n");
      } else {
        Set<FuncDep> violating = r.getFdsViolating2NF();
        sb.append("FD's violating 2NF:\n");
        for (FuncDep fd : violating) {
          sb.append(fd);
          sb.append('\n');
        } 
      } 
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonCheck2NFActionPerformed

    private void buttonDecomp2NFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecomp2NFActionPerformed
        try {
      String attrs = this.fieldAttribute.getText();
      String fds = this.fieldFD.getText();
      if (attrs.equals("") || fds.equals("")) {
        this.area.setText("Error!");
        return;
      } 
      StringBuilder sb = new StringBuilder();
      sb.append("<<<Forced Decomposition Regardless of Necessity>>>\n\n");
      Relation r = new Relation(attrs, fds);
      Set<Relation> rs = r.decomposeTo2NF();
      for (Relation rl : rs) {
        sb.append(rl);
        sb.append("\n\n");
      } 
      sb.delete(sb.length() - 2, sb.length() - 1);
      this.area.setText(sb.toString());
    } catch (Exception e) {
      this.area.setText("Error!");
    } 
    }//GEN-LAST:event_buttonDecomp2NFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
      byte b;
      int i;
      UIManager.LookAndFeelInfo[] arrayOfLookAndFeelInfo;
      for (i = (arrayOfLookAndFeelInfo = UIManager.getInstalledLookAndFeels()).length, b = 0; b < i; ) {
        UIManager.LookAndFeelInfo info = arrayOfLookAndFeelInfo[b];
        if ("Nimbus".equals(info.getName())) {
          UIManager.setLookAndFeel(info.getClassName());
          break;
        } 
        b++;
      } 
    } catch (ClassNotFoundException ex) {
      Logger.getLogger(Main.class.getName()).log(Level.SEVERE, (String)null, ex);
    } catch (InstantiationException ex) {
      Logger.getLogger(Main.class.getName()).log(Level.SEVERE, (String)null, ex);
    } catch (IllegalAccessException ex) {
      Logger.getLogger(Main.class.getName()).log(Level.SEVERE, (String)null, ex);
    } catch (UnsupportedLookAndFeelException ex) {
      Logger.getLogger(Main.class.getName()).log(Level.SEVERE, (String)null, ex);
    } 

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new front().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area;
    private javax.swing.JButton buttonCheck2NF;
    private javax.swing.JButton buttonCheck3NF;
    private javax.swing.JButton buttonCheckBCNF;
    private javax.swing.JButton buttonCheckEquiv;
    private javax.swing.JButton buttonClosure;
    private javax.swing.JButton buttonDecomp2NF;
    private javax.swing.JButton buttonDecomp3NF;
    private javax.swing.JButton buttonDecompBCNF;
    private javax.swing.JButton buttonKey;
    private javax.swing.JButton buttonLossyCheck;
    private javax.swing.JButton buttonMinimalBasis;
    private javax.swing.JButton buttonProjection;
    private javax.swing.JButton buttonSuperkey;
    private javax.swing.JButton buttonTestInput;
    private javax.swing.JTextField fieldAttribute;
    private javax.swing.JTextField fieldFD;
    private javax.swing.JButton help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
